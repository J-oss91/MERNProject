{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JoscelynD\\\\Desktop\\\\Wise2\\\\projects\\\\Mod2Project\\\\quiz-app\\\\src\\\\components\\\\Quiz.js\";\n// import React, { Component } from 'react';\n// import QuizData from './QuizData';\n\n// export class Quiz extends Component {\n//   state = {\n//     userAnswer: null,\n//     currentIndex: 0,\n//     options: [],\n//     quizEnd: false,\n//     score: 0,\n//     disabled: true,\n//   };\n\n//   // Function to handle user's answer selection\n//   handleOptionClick = (answer) => {\n//     // Add logic to handle user's answer selection and update state accordingly\n//   };\n\n//   render() {\n//     const { currentIndex, quizEnd } = this.state;\n\n//     if (quizEnd) {\n//       // Render quiz results or a \"Quiz completed\" message\n//       return <div>Quiz completed!</div>;\n//     }\n\n//     return (\n//       <div>\n//         <h2>{QuizData[currentIndex].question}</h2>\n//         <ul>\n//           {QuizData[currentIndex].options.map((option, index) => (\n//             <li key={index} onClick={() => this.handleOptionClick(option)}>\n//               {option}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Quiz;\nimport React, { Component } from 'react';\nimport QuizData from './QuizData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userAnswer: null,\n      currentIndex: 0,\n      options: [],\n      quizEnd: false,\n      score: 0,\n      disabled: true\n    };\n    // Function to handle user's answer selection and go to the next question\n    this.handleOptionClick = answer => {\n      // Check if the answer is correct and increment the score if needed\n      if (answer === QuizData[this.state.currentIndex].answer) {\n        this.setState(prevState => ({\n          score: prevState.score + 1\n        }));\n      }\n\n      // Disable options temporarily to prevent multiple selections\n      this.setState({\n        disabled: true\n      });\n\n      // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\n      setTimeout(() => {\n        this.nextQuestionHandler();\n      }, 1000); // 1 second delay before moving to the next question\n    };\n    // Function to move to the next question\n    this.nextQuestionHandler = () => {\n      const {\n        currentIndex\n      } = this.state;\n      if (currentIndex + 1 < QuizData.length) {\n        // If there are more questions, move to the next one\n        this.setState(prevState => ({\n          currentIndex: prevState.currentIndex + 1,\n          userAnswer: null,\n          disabled: false // Enable options for the next question\n        }));\n      } else {\n        // If there are no more questions, finish the quiz\n        this.finishHandler();\n      }\n    };\n    // Function to handle finishing the quiz\n    this.finishHandler = () => {\n      this.setState({\n        quizEnd: true\n      });\n    };\n  }\n  render() {\n    const {\n      currentIndex,\n      quizEnd\n    } = this.state;\n    if (quizEnd) {\n      // Render quiz results or a \"Quiz completed\" message\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Quiz completed! Your score is \", this.state.score, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: QuizData[currentIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: QuizData[currentIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => this.handleOptionClick(option)\n          // Apply some styling to show selected answer\n          ,\n          className: this.state.userAnswer === option ? 'selected-answer' : '',\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Quiz;","map":{"version":3,"names":["React","Component","QuizData","jsxDEV","_jsxDEV","Quiz","constructor","args","state","userAnswer","currentIndex","options","quizEnd","score","disabled","handleOptionClick","answer","setState","prevState","setTimeout","nextQuestionHandler","length","finishHandler","render","children","fileName","_jsxFileName","lineNumber","columnNumber","question","map","option","index","onClick","className"],"sources":["C:/Users/JoscelynD/Desktop/Wise2/projects/Mod2Project/quiz-app/src/components/Quiz.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import QuizData from './QuizData';\r\n\r\n// export class Quiz extends Component {\r\n//   state = {\r\n//     userAnswer: null,\r\n//     currentIndex: 0,\r\n//     options: [],\r\n//     quizEnd: false,\r\n//     score: 0,\r\n//     disabled: true,\r\n//   };\r\n\r\n//   // Function to handle user's answer selection\r\n//   handleOptionClick = (answer) => {\r\n//     // Add logic to handle user's answer selection and update state accordingly\r\n//   };\r\n\r\n//   render() {\r\n//     const { currentIndex, quizEnd } = this.state;\r\n\r\n//     if (quizEnd) {\r\n//       // Render quiz results or a \"Quiz completed\" message\r\n//       return <div>Quiz completed!</div>;\r\n//     }\r\n\r\n//     return (\r\n//       <div>\r\n//         <h2>{QuizData[currentIndex].question}</h2>\r\n//         <ul>\r\n//           {QuizData[currentIndex].options.map((option, index) => (\r\n//             <li key={index} onClick={() => this.handleOptionClick(option)}>\r\n//               {option}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Quiz;\r\nimport React, { Component } from 'react';\r\nimport QuizData from './QuizData';\r\n\r\nexport class Quiz extends Component {\r\n  state = {\r\n    userAnswer: null,\r\n    currentIndex: 0,\r\n    options: [],\r\n    quizEnd: false,\r\n    score: 0,\r\n    disabled: true,\r\n  };\r\n\r\n  // Function to handle user's answer selection and go to the next question\r\n  handleOptionClick = (answer) => {\r\n    // Check if the answer is correct and increment the score if needed\r\n    if (answer === QuizData[this.state.currentIndex].answer) {\r\n      this.setState((prevState) => ({\r\n        score: prevState.score + 1,\r\n      }));\r\n    }\r\n\r\n    // Disable options temporarily to prevent multiple selections\r\n    this.setState({ disabled: true });\r\n\r\n    // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\r\n    setTimeout(() => {\r\n      this.nextQuestionHandler();\r\n    }, 1000); // 1 second delay before moving to the next question\r\n  };\r\n\r\n  // Function to move to the next question\r\n  nextQuestionHandler = () => {\r\n    const { currentIndex } = this.state;\r\n    if (currentIndex + 1 < QuizData.length) {\r\n      // If there are more questions, move to the next one\r\n      this.setState((prevState) => ({\r\n        currentIndex: prevState.currentIndex + 1,\r\n        userAnswer: null,\r\n        disabled: false, // Enable options for the next question\r\n      }));\r\n    } else {\r\n      // If there are no more questions, finish the quiz\r\n      this.finishHandler();\r\n    }\r\n  };\r\n\r\n  // Function to handle finishing the quiz\r\n  finishHandler = () => {\r\n    this.setState({ quizEnd: true });\r\n  };\r\n\r\n  render() {\r\n    const { currentIndex, quizEnd } = this.state;\r\n\r\n    if (quizEnd) {\r\n      // Render quiz results or a \"Quiz completed\" message\r\n      return <div>Quiz completed! Your score is {this.state.score}.</div>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>{QuizData[currentIndex].question}</h2>\r\n        <ul>\r\n          {QuizData[currentIndex].options.map((option, index) => (\r\n            <li\r\n              key={index}\r\n              onClick={() => this.handleOptionClick(option)}\r\n              // Apply some styling to show selected answer\r\n              className={\r\n                this.state.userAnswer === option ? 'selected-answer' : ''\r\n              }\r\n            >\r\n              {option}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}