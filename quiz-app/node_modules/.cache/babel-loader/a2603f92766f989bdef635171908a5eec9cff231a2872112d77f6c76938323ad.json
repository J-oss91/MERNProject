{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JoscelynD\\\\Desktop\\\\Wise2\\\\projects\\\\Mod2Project\\\\quiz-app\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from 'react';\n// import QuizData from './QuizData';\n\n// export class Quiz extends Component {\n//   state = {\n//     userAnswer: null,\n//     currentIndex: 0,\n//     options: [],\n//     quizEnd: false,\n//     score: 0,\n//     disabled: true,\n//     feedback: null, // New state to store feedback message\n//   };\n//   // Function to handle user's answer selection and go to the next question\n//   handleOptionClick = (answer) => {\n//     const { currentIndex } = this.state;\n//     const correctAnswer = QuizData[currentIndex].answer;\n\n//     // Check if the answer is correct and update feedback message\n//     const feedback = answer === correctAnswer ? 'Correct!' : 'Incorrect!';\n\n//     // Check if the answer is correct and increment the score if needed\n//     if (answer === correctAnswer) {\n//       this.setState((prevState) => ({\n//         score: prevState.score + 1,\n//       }));\n//     }\n\n//     // Disable options temporarily to prevent multiple selections\n//     this.setState({ disabled: true, feedback });\n\n//     // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\n//     setTimeout(() => {\n//       this.nextQuestionHandler();\n//     }, 1000); // 1 second delay before moving to the next question\n//   };\n\n//   // Function to move to the next question\n//   nextQuestionHandler = () => {\n//     const { currentIndex } = this.state;\n//     if (currentIndex + 1 < QuizData.length) {\n//       // If there are more questions, move to the next one\n//       this.setState((prevState) => ({\n//         currentIndex: prevState.currentIndex + 1,\n//         userAnswer: null,\n//         disabled: false, // Enable options for the next question\n//         feedback: null, // Clear feedback message for the next question\n//       }));\n//     } else {\n//       // If there are no more questions, finish the quiz\n//       this.finishHandler();\n//     }\n//   };\n\n//   // Function to handle finishing the quiz\n//   finishHandler = () => {\n//     this.setState({ quizEnd: true });\n//   };\n\n//   // Function to handle user's radio button selection\n//   handleRadioChange = (event) => {\n//     this.setState({\n//       userAnswer: event.target.value,\n//       disabled: false, // Enable the \"Next\" button after the user selects an option\n//     });\n//   };\n\n//   render() {\n//     const { currentIndex, quizEnd, feedback } = this.state;\n//     const currentQuestion = QuizData[currentIndex];\n\n//     if (quizEnd) {\n//       // Render quiz results or a \"Quiz completed\" message\n//       return <div>Quiz completed! Your score is {this.state.score}.</div>;\n//     }\n\n//     return (\n//       <div>\n//         <h2>Question {currentIndex + 1}</h2>\n//         <h3>{currentQuestion.question}</h3>\n//         {feedback && <p>{feedback}</p>} {/* Display feedback if available */}\n//         <ul>\n//           {currentQuestion.options.map((option, index) => (\n//             <li key={index}>\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 id={`option-${index}`}\n//                 value={option}\n//                 checked={this.state.userAnswer === option}\n//                 onChange={this.handleRadioChange}\n//               />\n//               <label htmlFor={`option-${index}`}>{option}</label>\n//             </li>\n//           ))}\n//         </ul>\n//         <button\n//           onClick={this.handleOptionClick.bind(this, this.state.userAnswer)}\n//           disabled={this.state.disabled}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Quiz;\n\nimport React, { useState } from 'react';\nimport QuizData from './QuizData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  finishHandler\n}) => {\n  _s();\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [quizEnd, setQuizEnd] = useState(false);\n  const [score, setScore] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n  const [feedback, setFeedback] = useState(null);\n  const handleOptionClick = answer => {\n    const correctAnswer = QuizData[currentIndex].answer;\n    const isCorrect = answer === correctAnswer;\n    setFeedback(isCorrect ? 'Correct!' : 'Incorrect!');\n    setDisabled(true);\n    if (isCorrect) {\n      setScore(prevScore => prevScore + 1);\n    }\n    setTimeout(() => {\n      setFeedback(null);\n      setDisabled(false);\n      setCurrentIndex(prevIndex => prevIndex + 1);\n      setUserAnswer(null);\n      if (currentIndex === QuizData.length - 1) {\n        setQuizEnd(true);\n        finishHandler();\n      }\n    }, 1000);\n  };\n  const handleRadioChange = event => {\n    setUserAnswer(event.target.value);\n    setDisabled(false);\n  };\n  if (quizEnd) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Quiz completed! Your score is \", score, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = QuizData[currentIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Question \", currentIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: feedback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: \"option\",\n            value: option,\n            checked: userAnswer === option,\n            onChange: handleRadioChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), option]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleOptionClick(userAnswer),\n      disabled: disabled,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"V4LYKIUj54CNl1IIOROn/PCLOd0=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","QuizData","jsxDEV","_jsxDEV","Quiz","finishHandler","_s","userAnswer","setUserAnswer","currentIndex","setCurrentIndex","quizEnd","setQuizEnd","score","setScore","disabled","setDisabled","feedback","setFeedback","handleOptionClick","answer","correctAnswer","isCorrect","prevScore","setTimeout","prevIndex","length","handleRadioChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","question","options","map","option","index","type","name","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/JoscelynD/Desktop/Wise2/projects/Mod2Project/quiz-app/src/components/Quiz.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import QuizData from './QuizData';\r\n\r\n// export class Quiz extends Component {\r\n//   state = {\r\n//     userAnswer: null,\r\n//     currentIndex: 0,\r\n//     options: [],\r\n//     quizEnd: false,\r\n//     score: 0,\r\n//     disabled: true,\r\n//     feedback: null, // New state to store feedback message\r\n//   };\r\n//   // Function to handle user's answer selection and go to the next question\r\n//   handleOptionClick = (answer) => {\r\n//     const { currentIndex } = this.state;\r\n//     const correctAnswer = QuizData[currentIndex].answer;\r\n\r\n//     // Check if the answer is correct and update feedback message\r\n//     const feedback = answer === correctAnswer ? 'Correct!' : 'Incorrect!';\r\n\r\n//     // Check if the answer is correct and increment the score if needed\r\n//     if (answer === correctAnswer) {\r\n//       this.setState((prevState) => ({\r\n//         score: prevState.score + 1,\r\n//       }));\r\n//     }\r\n\r\n//     // Disable options temporarily to prevent multiple selections\r\n//     this.setState({ disabled: true, feedback });\r\n\r\n//     // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\r\n//     setTimeout(() => {\r\n//       this.nextQuestionHandler();\r\n//     }, 1000); // 1 second delay before moving to the next question\r\n//   };\r\n\r\n//   // Function to move to the next question\r\n//   nextQuestionHandler = () => {\r\n//     const { currentIndex } = this.state;\r\n//     if (currentIndex + 1 < QuizData.length) {\r\n//       // If there are more questions, move to the next one\r\n//       this.setState((prevState) => ({\r\n//         currentIndex: prevState.currentIndex + 1,\r\n//         userAnswer: null,\r\n//         disabled: false, // Enable options for the next question\r\n//         feedback: null, // Clear feedback message for the next question\r\n//       }));\r\n//     } else {\r\n//       // If there are no more questions, finish the quiz\r\n//       this.finishHandler();\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle finishing the quiz\r\n//   finishHandler = () => {\r\n//     this.setState({ quizEnd: true });\r\n//   };\r\n\r\n//   // Function to handle user's radio button selection\r\n//   handleRadioChange = (event) => {\r\n//     this.setState({\r\n//       userAnswer: event.target.value,\r\n//       disabled: false, // Enable the \"Next\" button after the user selects an option\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     const { currentIndex, quizEnd, feedback } = this.state;\r\n//     const currentQuestion = QuizData[currentIndex];\r\n\r\n//     if (quizEnd) {\r\n//       // Render quiz results or a \"Quiz completed\" message\r\n//       return <div>Quiz completed! Your score is {this.state.score}.</div>;\r\n//     }\r\n\r\n//     return (\r\n//       <div>\r\n//         <h2>Question {currentIndex + 1}</h2>\r\n//         <h3>{currentQuestion.question}</h3>\r\n//         {feedback && <p>{feedback}</p>} {/* Display feedback if available */}\r\n//         <ul>\r\n//           {currentQuestion.options.map((option, index) => (\r\n//             <li key={index}>\r\n//               <input\r\n//                 type=\"radio\"\r\n//                 name=\"option\"\r\n//                 id={`option-${index}`}\r\n//                 value={option}\r\n//                 checked={this.state.userAnswer === option}\r\n//                 onChange={this.handleRadioChange}\r\n//               />\r\n//               <label htmlFor={`option-${index}`}>{option}</label>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         <button\r\n//           onClick={this.handleOptionClick.bind(this, this.state.userAnswer)}\r\n//           disabled={this.state.disabled}\r\n//         >\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Quiz;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport QuizData from './QuizData';\r\n\r\nconst Quiz = ({ finishHandler }) => {\r\n  const [userAnswer, setUserAnswer] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [quizEnd, setQuizEnd] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [feedback, setFeedback] = useState(null);\r\n\r\n  const handleOptionClick = (answer) => {\r\n    const correctAnswer = QuizData[currentIndex].answer;\r\n    const isCorrect = answer === correctAnswer;\r\n\r\n    setFeedback(isCorrect ? 'Correct!' : 'Incorrect!');\r\n    setDisabled(true);\r\n\r\n    if (isCorrect) {\r\n      setScore((prevScore) => prevScore + 1);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setFeedback(null);\r\n      setDisabled(false);\r\n      setCurrentIndex((prevIndex) => prevIndex + 1);\r\n      setUserAnswer(null);\r\n\r\n      if (currentIndex === QuizData.length - 1) {\r\n        setQuizEnd(true);\r\n        finishHandler();\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const handleRadioChange = (event) => {\r\n    setUserAnswer(event.target.value);\r\n    setDisabled(false);\r\n  };\r\n\r\n  if (quizEnd) {\r\n    return <div>Quiz completed! Your score is {score}.</div>;\r\n  }\r\n\r\n  const currentQuestion = QuizData[currentIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h2>Question {currentIndex + 1}</h2>\r\n      <h3>{currentQuestion.question}</h3>\r\n      {feedback && <p>{feedback}</p>}\r\n      <ul>\r\n        {currentQuestion.options.map((option, index) => (\r\n          <li key={index}>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"option\"\r\n                value={option}\r\n                checked={userAnswer === option}\r\n                onChange={handleRadioChange}\r\n              />\r\n              {option}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={() => handleOptionClick(userAnswer)} disabled={disabled}>\r\n        Next\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMmB,iBAAiB,GAAIC,MAAM,IAAK;IACpC,MAAMC,aAAa,GAAGpB,QAAQ,CAACQ,YAAY,CAAC,CAACW,MAAM;IACnD,MAAME,SAAS,GAAGF,MAAM,KAAKC,aAAa;IAE1CH,WAAW,CAACI,SAAS,GAAG,UAAU,GAAG,YAAY,CAAC;IAClDN,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAIM,SAAS,EAAE;MACbR,QAAQ,CAAES,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IACxC;IAEAC,UAAU,CAAC,MAAM;MACfN,WAAW,CAAC,IAAI,CAAC;MACjBF,WAAW,CAAC,KAAK,CAAC;MAClBN,eAAe,CAAEe,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MAC7CjB,aAAa,CAAC,IAAI,CAAC;MAEnB,IAAIC,YAAY,KAAKR,QAAQ,CAACyB,MAAM,GAAG,CAAC,EAAE;QACxCd,UAAU,CAAC,IAAI,CAAC;QAChBP,aAAa,CAAC,CAAC;MACjB;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMsB,iBAAiB,GAAIC,KAAK,IAAK;IACnCpB,aAAa,CAACoB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACjCd,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,IAAIL,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAA4B,QAAA,GAAK,gCAA8B,EAAClB,KAAK,EAAC,GAAC;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC1D;EAEA,MAAMC,eAAe,GAAGnC,QAAQ,CAACQ,YAAY,CAAC;EAE9C,oBACEN,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,GAAI,WAAS,EAACtB,YAAY,GAAG,CAAC;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpChC,OAAA;MAAA4B,QAAA,EAAKK,eAAe,CAACC;IAAQ;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAClClB,QAAQ,iBAAId,OAAA;MAAA4B,QAAA,EAAId;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BhC,OAAA;MAAA4B,QAAA,EACGK,eAAe,CAACE,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzCtC,OAAA;QAAA4B,QAAA,eACE5B,OAAA;UAAA4B,QAAA,gBACE5B,OAAA;YACEuC,IAAI,EAAC,OAAO;YACZC,IAAI,EAAC,QAAQ;YACbb,KAAK,EAAEU,MAAO;YACdI,OAAO,EAAErC,UAAU,KAAKiC,MAAO;YAC/BK,QAAQ,EAAElB;UAAkB;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B,CAAC,EACDK,MAAM;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC,GAVDM,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACLhC,OAAA;MAAQ2C,OAAO,EAAEA,CAAA,KAAM3B,iBAAiB,CAACZ,UAAU,CAAE;MAACQ,QAAQ,EAAEA,QAAS;MAAAgB,QAAA,EAAC;IAE1E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAC7B,EAAA,CArEIF,IAAI;AAAA2C,EAAA,GAAJ3C,IAAI;AAuEV,eAAeA,IAAI;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}