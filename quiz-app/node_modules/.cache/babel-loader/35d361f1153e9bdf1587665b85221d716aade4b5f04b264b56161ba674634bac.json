{"ast":null,"code":"// import React, { Component } from 'react';\n// import QuizData from './QuizData';\n\n// export class Quiz extends Component {\n//   state = {\n//     userAnswer: null,\n//     currentIndex: 0,\n//     options: [],\n//     quizEnd: false,\n//     score: 0,\n//     disabled: true,\n//     feedback: null, // New state to store feedback message\n//   };\n//   // Function to handle user's answer selection and go to the next question\n//   handleOptionClick = (answer) => {\n//     const { currentIndex } = this.state;\n//     const correctAnswer = QuizData[currentIndex].answer;\n\n//     // Check if the answer is correct and update feedback message\n//     const feedback = answer === correctAnswer ? 'Correct!' : 'Incorrect!';\n\n//     // Check if the answer is correct and increment the score if needed\n//     if (answer === correctAnswer) {\n//       this.setState((prevState) => ({\n//         score: prevState.score + 1,\n//       }));\n//     }\n\n//     // Disable options temporarily to prevent multiple selections\n//     this.setState({ disabled: true, feedback });\n\n//     // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\n//     setTimeout(() => {\n//       this.nextQuestionHandler();\n//     }, 1000); // 1 second delay before moving to the next question\n//   };\n\n//   // Function to move to the next question\n//   nextQuestionHandler = () => {\n//     const { currentIndex } = this.state;\n//     if (currentIndex + 1 < QuizData.length) {\n//       // If there are more questions, move to the next one\n//       this.setState((prevState) => ({\n//         currentIndex: prevState.currentIndex + 1,\n//         userAnswer: null,\n//         disabled: false, // Enable options for the next question\n//         feedback: null, // Clear feedback message for the next question\n//       }));\n//     } else {\n//       // If there are no more questions, finish the quiz\n//       this.finishHandler();\n//     }\n//   };\n\n//   // Function to handle finishing the quiz\n//   finishHandler = () => {\n//     this.setState({ quizEnd: true });\n//   };\n\n//   // Function to handle user's radio button selection\n//   handleRadioChange = (event) => {\n//     this.setState({\n//       userAnswer: event.target.value,\n//       disabled: false, // Enable the \"Next\" button after the user selects an option\n//     });\n//   };\n\n//   render() {\n//     const { currentIndex, quizEnd, feedback } = this.state;\n//     const currentQuestion = QuizData[currentIndex];\n\n//     if (quizEnd) {\n//       // Render quiz results or a \"Quiz completed\" message\n//       return <div>Quiz completed! Your score is {this.state.score}.</div>;\n//     }\n\n//     return (\n//       <div>\n//         <h2>Question {currentIndex + 1}</h2>\n//         <h3>{currentQuestion.question}</h3>\n//         {feedback && <p>{feedback}</p>} {/* Display feedback if available */}\n//         <ul>\n//           {currentQuestion.options.map((option, index) => (\n//             <li key={index}>\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 id={`option-${index}`}\n//                 value={option}\n//                 checked={this.state.userAnswer === option}\n//                 onChange={this.handleRadioChange}\n//               />\n//               <label htmlFor={`option-${index}`}>{option}</label>\n//             </li>\n//           ))}\n//         </ul>\n//         <button\n//           onClick={this.handleOptionClick.bind(this, this.state.userAnswer)}\n//           disabled={this.state.disabled}\n//         >\n//           Next\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Quiz;","map":{"version":3,"names":[],"sources":["C:/Users/JoscelynD/Desktop/Wise2/projects/Mod2Project/quiz-app/src/components/Quiz.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import QuizData from './QuizData';\r\n\r\n// export class Quiz extends Component {\r\n//   state = {\r\n//     userAnswer: null,\r\n//     currentIndex: 0,\r\n//     options: [],\r\n//     quizEnd: false,\r\n//     score: 0,\r\n//     disabled: true,\r\n//     feedback: null, // New state to store feedback message\r\n//   };\r\n//   // Function to handle user's answer selection and go to the next question\r\n//   handleOptionClick = (answer) => {\r\n//     const { currentIndex } = this.state;\r\n//     const correctAnswer = QuizData[currentIndex].answer;\r\n\r\n//     // Check if the answer is correct and update feedback message\r\n//     const feedback = answer === correctAnswer ? 'Correct!' : 'Incorrect!';\r\n\r\n//     // Check if the answer is correct and increment the score if needed\r\n//     if (answer === correctAnswer) {\r\n//       this.setState((prevState) => ({\r\n//         score: prevState.score + 1,\r\n//       }));\r\n//     }\r\n\r\n//     // Disable options temporarily to prevent multiple selections\r\n//     this.setState({ disabled: true, feedback });\r\n\r\n//     // Delay moving to the next question to allow feedback to be displayed (you can adjust the delay time)\r\n//     setTimeout(() => {\r\n//       this.nextQuestionHandler();\r\n//     }, 1000); // 1 second delay before moving to the next question\r\n//   };\r\n\r\n//   // Function to move to the next question\r\n//   nextQuestionHandler = () => {\r\n//     const { currentIndex } = this.state;\r\n//     if (currentIndex + 1 < QuizData.length) {\r\n//       // If there are more questions, move to the next one\r\n//       this.setState((prevState) => ({\r\n//         currentIndex: prevState.currentIndex + 1,\r\n//         userAnswer: null,\r\n//         disabled: false, // Enable options for the next question\r\n//         feedback: null, // Clear feedback message for the next question\r\n//       }));\r\n//     } else {\r\n//       // If there are no more questions, finish the quiz\r\n//       this.finishHandler();\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle finishing the quiz\r\n//   finishHandler = () => {\r\n//     this.setState({ quizEnd: true });\r\n//   };\r\n\r\n//   // Function to handle user's radio button selection\r\n//   handleRadioChange = (event) => {\r\n//     this.setState({\r\n//       userAnswer: event.target.value,\r\n//       disabled: false, // Enable the \"Next\" button after the user selects an option\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     const { currentIndex, quizEnd, feedback } = this.state;\r\n//     const currentQuestion = QuizData[currentIndex];\r\n\r\n//     if (quizEnd) {\r\n//       // Render quiz results or a \"Quiz completed\" message\r\n//       return <div>Quiz completed! Your score is {this.state.score}.</div>;\r\n//     }\r\n\r\n//     return (\r\n//       <div>\r\n//         <h2>Question {currentIndex + 1}</h2>\r\n//         <h3>{currentQuestion.question}</h3>\r\n//         {feedback && <p>{feedback}</p>} {/* Display feedback if available */}\r\n//         <ul>\r\n//           {currentQuestion.options.map((option, index) => (\r\n//             <li key={index}>\r\n//               <input\r\n//                 type=\"radio\"\r\n//                 name=\"option\"\r\n//                 id={`option-${index}`}\r\n//                 value={option}\r\n//                 checked={this.state.userAnswer === option}\r\n//                 onChange={this.handleRadioChange}\r\n//               />\r\n//               <label htmlFor={`option-${index}`}>{option}</label>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         <button\r\n//           onClick={this.handleOptionClick.bind(this, this.state.userAnswer)}\r\n//           disabled={this.state.disabled}\r\n//         >\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Quiz;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}